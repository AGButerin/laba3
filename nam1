#include <iostream>
#include <cmath>

// Function to evaluate the integrand f(x) = x^4 / (4 + x^2)
double f(double x) {
    return pow(x, 4) / (4 + pow(x, 2));
}

// Rectangular method (Midpoint rule) for numerical integration
double rectangular_method(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        double x_mid = a + (i + 0.5) * h;
        sum += f(x_mid);
    }
    return h * sum;
}

int main() {
    double a = 1.0;  // Lower limit of integration
    double b = 2.0;  // Upper limit of integration
    int n = 1000;    // Number of subintervals (adjust for desired accuracy)

    double result_rectangular = rectangular_method(a, b, n);

    std::cout << "Result using Rectangular (Midpoint) method: " << result_rectangular << std::endl;

    return 0;
}
// метод трапеций:
double trapezoidal_method(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.5 * (f(a) + f(b));
    for (int i = 1; i < n; ++i) {
        double x_i = a + i * h;
        sum += f(x_i);
    }
    return h * sum;
}

int main() {
    // Same main function as above

    double result_trapezoidal = trapezoidal_method(a, b, n);

    std::cout << "Result using Trapezoidal method: " << result_trapezoidal << std::endl;

    return 0;
}
// метод симпсона
// Simpson's 1/3 rule for numerical integration
double simpsons_method(double a, double b, int n) {
    if (n % 2 != 0) {
        std::cerr << "Error: Simpson's rule requires an even number of intervals.\n";
        return 0.0;
    }

    double h = (b - a) / n;
    double sum = f(a) + f(b); // First and last terms

    for (int i = 1; i < n; ++i) {
        double x_i = a + i * h;
        sum += (i % 2 == 0) ? 2 * f(x_i) : 4 * f(x_i);
    }

    return h * sum / 3.0;
}

int main() {
    // Same main function as above

    double result_simpsons = simpsons_method(a, b, n);

    std::cout << "Result using Simpson's method: " << result_simpsons << std::endl;

    return 0;
}
